// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.BlockDeviceVolume": schema_pkg_apis_ignite_v1alpha2_BlockDeviceVolume(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.FileMapping":       schema_pkg_apis_ignite_v1alpha2_FileMapping(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.Image":             schema_pkg_apis_ignite_v1alpha2_Image(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.ImageSpec":         schema_pkg_apis_ignite_v1alpha2_ImageSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.ImageStatus":       schema_pkg_apis_ignite_v1alpha2_ImageStatus(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.Kernel":            schema_pkg_apis_ignite_v1alpha2_Kernel(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.KernelSpec":        schema_pkg_apis_ignite_v1alpha2_KernelSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.KernelStatus":      schema_pkg_apis_ignite_v1alpha2_KernelStatus(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.OCIImageSource":    schema_pkg_apis_ignite_v1alpha2_OCIImageSource(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.Pool":              schema_pkg_apis_ignite_v1alpha2_Pool(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.PoolDevice":        schema_pkg_apis_ignite_v1alpha2_PoolDevice(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.PoolSpec":          schema_pkg_apis_ignite_v1alpha2_PoolSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.PoolStatus":        schema_pkg_apis_ignite_v1alpha2_PoolStatus(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.Runtime":           schema_pkg_apis_ignite_v1alpha2_Runtime(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.SSH":               schema_pkg_apis_ignite_v1alpha2_SSH(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VM":                schema_pkg_apis_ignite_v1alpha2_VM(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMImageSpec":       schema_pkg_apis_ignite_v1alpha2_VMImageSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMKernelSpec":      schema_pkg_apis_ignite_v1alpha2_VMKernelSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMNetworkSpec":     schema_pkg_apis_ignite_v1alpha2_VMNetworkSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMSandboxSpec":     schema_pkg_apis_ignite_v1alpha2_VMSandboxSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMSpec":            schema_pkg_apis_ignite_v1alpha2_VMSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMStatus":          schema_pkg_apis_ignite_v1alpha2_VMStatus(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMStorageSpec":     schema_pkg_apis_ignite_v1alpha2_VMStorageSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.Volume":            schema_pkg_apis_ignite_v1alpha2_Volume(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VolumeMount":       schema_pkg_apis_ignite_v1alpha2_VolumeMount(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.BlockDeviceVolume": schema_pkg_apis_ignite_v1alpha3_BlockDeviceVolume(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Configuration":     schema_pkg_apis_ignite_v1alpha3_Configuration(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.ConfigurationSpec": schema_pkg_apis_ignite_v1alpha3_ConfigurationSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.FileMapping":       schema_pkg_apis_ignite_v1alpha3_FileMapping(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Image":             schema_pkg_apis_ignite_v1alpha3_Image(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.ImageSpec":         schema_pkg_apis_ignite_v1alpha3_ImageSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.ImageStatus":       schema_pkg_apis_ignite_v1alpha3_ImageStatus(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Kernel":            schema_pkg_apis_ignite_v1alpha3_Kernel(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.KernelSpec":        schema_pkg_apis_ignite_v1alpha3_KernelSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.KernelStatus":      schema_pkg_apis_ignite_v1alpha3_KernelStatus(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Network":           schema_pkg_apis_ignite_v1alpha3_Network(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.OCIImageSource":    schema_pkg_apis_ignite_v1alpha3_OCIImageSource(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Pool":              schema_pkg_apis_ignite_v1alpha3_Pool(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.PoolDevice":        schema_pkg_apis_ignite_v1alpha3_PoolDevice(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.PoolSpec":          schema_pkg_apis_ignite_v1alpha3_PoolSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.PoolStatus":        schema_pkg_apis_ignite_v1alpha3_PoolStatus(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Runtime":           schema_pkg_apis_ignite_v1alpha3_Runtime(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.SSH":               schema_pkg_apis_ignite_v1alpha3_SSH(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VM":                schema_pkg_apis_ignite_v1alpha3_VM(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMImageSpec":       schema_pkg_apis_ignite_v1alpha3_VMImageSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMKernelSpec":      schema_pkg_apis_ignite_v1alpha3_VMKernelSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMNetworkSpec":     schema_pkg_apis_ignite_v1alpha3_VMNetworkSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMSandboxSpec":     schema_pkg_apis_ignite_v1alpha3_VMSandboxSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMSpec":            schema_pkg_apis_ignite_v1alpha3_VMSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMStatus":          schema_pkg_apis_ignite_v1alpha3_VMStatus(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMStorageSpec":     schema_pkg_apis_ignite_v1alpha3_VMStorageSpec(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Volume":            schema_pkg_apis_ignite_v1alpha3_Volume(ref),
		"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VolumeMount":       schema_pkg_apis_ignite_v1alpha3_VolumeMount(ref),
		"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.DMID":                schema_pkg_apis_meta_v1alpha1_DMID(ref),
		"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIContentID":        schema_pkg_apis_meta_v1alpha1_OCIContentID(ref),
		"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef":         schema_pkg_apis_meta_v1alpha1_OCIImageRef(ref),
		"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.PortMapping":         schema_pkg_apis_meta_v1alpha1_PortMapping(ref),
		"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size":                schema_pkg_apis_meta_v1alpha1_Size(ref),
	}
}

func schema_pkg_apis_ignite_v1alpha2_BlockDeviceVolume(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BlockDeviceVolume defines a block device on the host",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"path"},
			},
		},
	}
}

func schema_pkg_apis_ignite_v1alpha2_FileMapping(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FileMapping defines mappings between files on the host and VM",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"vmPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"hostPath", "vmPath"},
			},
		},
	}
}

func schema_pkg_apis_ignite_v1alpha2_Image(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Image represents a cached OCI image ready to be used with Ignite",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "runtime.ObjectMeta is also embedded into the struct, and defines the human-readable name, and the machine-readable ID Name is available at the .metadata.name JSON path ID is available at the .metadata.uid JSON path (the Go type is k8s.io/apimachinery/pkg/types.UID, which is only a typed string)",
							Ref:         ref("github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.ImageSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.ImageStatus"),
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.ImageSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.ImageStatus", "github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_ImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageSpec declares what the image contains",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"oci": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"),
						},
					},
				},
				Required: []string{"oci"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_ImageStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageStatus defines the status of the image",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ociSource": {
						SchemaProps: spec.SchemaProps{
							Description: "OCISource contains the information about how this OCI image was imported",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.OCIImageSource"),
						},
					},
				},
				Required: []string{"ociSource"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.OCIImageSource"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_Kernel(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Kernel is a serializable object that caches information about imported kernels This file is stored in /var/lib/firecracker/kernels/{oci-image-digest}/metadata.json",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "runtime.ObjectMeta is also embedded into the struct, and defines the human-readable name, and the machine-readable ID Name is available at the .metadata.name JSON path ID is available at the .metadata.uid JSON path (the Go type is k8s.io/apimachinery/pkg/types.UID, which is only a typed string)",
							Ref:         ref("github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.KernelSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.KernelStatus"),
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.KernelSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.KernelStatus", "github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_KernelSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KernelSpec describes the properties of a kernel",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"oci": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"),
						},
					},
				},
				Required: []string{"oci"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_KernelStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KernelStatus describes the status of a kernel",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ociSource": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.OCIImageSource"),
						},
					},
				},
				Required: []string{"version", "ociSource"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.OCIImageSource"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_OCIImageSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OCIImageSource specifies how the OCI image was imported. It is the status variant of OCIImageClaim",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID defines the source's content ID (e.g. the canonical OCI path or Docker image ID)",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIContentID"),
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size defines the size of the source in bytes",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
				},
				Required: []string{"id", "size"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIContentID", "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_Pool(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Pool defines device mapper pool database This file is managed by the snapshotter part of Ignite, and the file (existing as a singleton) is present at /var/lib/firecracker/snapshotter/pool.json",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.PoolSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.PoolStatus"),
						},
					},
				},
				Required: []string{"TypeMeta", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.PoolSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.PoolStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_PoolDevice(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PoolDevice defines one device in the pool",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"size": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"parent": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.DMID"),
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type specifies the type of the contents of the device",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataPath": {
						SchemaProps: spec.SchemaProps{
							Description: "MetadataPath points to the JSON/YAML file with metadata about this device This is most often of the format /var/lib/firecracker/{type}/{id}/metadata.json",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"size", "parent", "type", "metadataPath"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.DMID", "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_PoolSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PoolSpec defines the Pool's specification",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"metadataSize": {
						SchemaProps: spec.SchemaProps{
							Description: "MetadataSize specifies the size of the pool's metadata",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"dataSize": {
						SchemaProps: spec.SchemaProps{
							Description: "DataSize specifies the size of the pool's data",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"allocationSize": {
						SchemaProps: spec.SchemaProps{
							Description: "AllocationSize specifies the smallest size that can be allocated at a time",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"metadataPath": {
						SchemaProps: spec.SchemaProps{
							Description: "MetadataPath points to the file where device mapper stores all metadata information Defaults to constants.SNAPSHOTTER_METADATA_PATH",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataPath": {
						SchemaProps: spec.SchemaProps{
							Description: "DataPath points to the backing physical device or sparse file (to be loop mounted) for the pool Defaults to constants.SNAPSHOTTER_DATA_PATH",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"metadataSize", "dataSize", "allocationSize", "metadataPath", "dataPath"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_PoolStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PoolStatus defines the Pool's current status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"devices": {
						SchemaProps: spec.SchemaProps{
							Description: "The Devices array needs to contain pointers to accommodate \"holes\" in the mapping Where devices have been deleted, the pointer is nil",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.PoolDevice"),
									},
								},
							},
						},
					},
				},
				Required: []string{"devices"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.PoolDevice"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_Runtime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Runtime specifies the VM's runtime information",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"id"},
			},
		},
	}
}

func schema_pkg_apis_ignite_v1alpha2_SSH(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SSH specifies different ways to connect via SSH to the VM SSH uses a custom marshaller/unmarshaller. If generate is true, it marshals to true (a JSON bool). If PublicKey is set, it marshals to that string.",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_ignite_v1alpha2_VM(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VM represents a virtual machine run by Firecracker These files are stored in /var/lib/firecracker/vm/{vm-id}/metadata.json",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "runtime.ObjectMeta is also embedded into the struct, and defines the human-readable name, and the machine-readable ID Name is available at the .metadata.name JSON path ID is available at the .metadata.uid JSON path (the Go type is k8s.io/apimachinery/pkg/types.UID, which is only a typed string)",
							Ref:         ref("github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMStatus"),
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMStatus", "github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_VMImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"oci": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"),
						},
					},
				},
				Required: []string{"oci"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_VMKernelSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"oci": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"),
						},
					},
					"cmdLine": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"oci"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_VMNetworkSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ports": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.PortMapping"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.PortMapping"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_VMSandboxSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VMSandboxSpec is the spec of the sandbox used for the VM.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"oci": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"),
						},
					},
				},
				Required: []string{"oci"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_VMSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VMSpec describes the configuration of a VM",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMImageSpec"),
						},
					},
					"sandbox": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMSandboxSpec"),
						},
					},
					"kernel": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMKernelSpec"),
						},
					},
					"cpus": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"memory": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"diskSize": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "Currently both will show in the JSON output as empty arrays. Making them pointers requires plenty of nil checks (as their contents are accessed directly) and is very risky for stability. APIMachinery potentially has a solution.",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMNetworkSpec"),
						},
					},
					"storage": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMStorageSpec"),
						},
					},
					"copyFiles": {
						SchemaProps: spec.SchemaProps{
							Description: "This will be done at either \"ignite start\" or \"ignite create\" time",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.FileMapping"),
									},
								},
							},
						},
					},
					"ssh": {
						SchemaProps: spec.SchemaProps{
							Description: "SSH specifies how the SSH setup should be done nil here means \"don't do anything special\" If SSH.Generate is set, Ignite will generate a new SSH key and copy it in to authorized_keys in the VM Specifying a path in SSH.Generate means \"use this public key\" If SSH.PublicKey is set, this struct will marshal as a string using that path If SSH.Generate is set, this struct will marshal as a bool => true",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.SSH"),
						},
					},
				},
				Required: []string{"image", "sandbox", "kernel", "cpus", "memory", "diskSize"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.FileMapping", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.SSH", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMImageSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMKernelSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMNetworkSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMSandboxSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VMStorageSpec", "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_VMStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VMStatus defines the status of a VM",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"running": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"runtime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.Runtime"),
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/libgitops/pkg/runtime.Time"),
						},
					},
					"ipAddresses": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "byte",
									},
								},
							},
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.OCIImageSource"),
						},
					},
					"kernel": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.OCIImageSource"),
						},
					},
				},
				Required: []string{"running", "image", "kernel"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.OCIImageSource", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.Runtime", "github.com/weaveworks/libgitops/pkg/runtime.Time"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_VMStorageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VMStorageSpec defines the VM's Volumes and VolumeMounts",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.Volume"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VolumeMount"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.Volume", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.VolumeMount"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_Volume(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Volume defines named storage volume",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"blockDevice": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.BlockDeviceVolume"),
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha2.BlockDeviceVolume"},
	}
}

func schema_pkg_apis_ignite_v1alpha2_VolumeMount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VolumeMount defines the mount point for a named volume inside a VM",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"mountPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "mountPath"},
			},
		},
	}
}

func schema_pkg_apis_ignite_v1alpha3_BlockDeviceVolume(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BlockDeviceVolume defines a block device on the host",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"path": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"path"},
			},
		},
	}
}

func schema_pkg_apis_ignite_v1alpha3_Configuration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Configuration represents the ignite runtime configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.ConfigurationSpec"),
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "spec"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.ConfigurationSpec", "github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_ConfigurationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigurationSpec defines the ignite configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"runtime": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"networkPlugin": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"vmDefaults": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMSpec"),
						},
					},
					"namePrefix": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMSpec"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_FileMapping(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FileMapping defines mappings between files on the host and VM",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"vmPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"hostPath", "vmPath"},
			},
		},
	}
}

func schema_pkg_apis_ignite_v1alpha3_Image(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Image represents a cached OCI image ready to be used with Ignite",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "runtime.ObjectMeta is also embedded into the struct, and defines the human-readable name, and the machine-readable ID Name is available at the .metadata.name JSON path ID is available at the .metadata.uid JSON path (the Go type is k8s.io/apimachinery/pkg/types.UID, which is only a typed string)",
							Ref:         ref("github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.ImageSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.ImageStatus"),
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.ImageSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.ImageStatus", "github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_ImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageSpec declares what the image contains",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"oci": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"),
						},
					},
				},
				Required: []string{"oci"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_ImageStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageStatus defines the status of the image",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ociSource": {
						SchemaProps: spec.SchemaProps{
							Description: "OCISource contains the information about how this OCI image was imported",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.OCIImageSource"),
						},
					},
				},
				Required: []string{"ociSource"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.OCIImageSource"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_Kernel(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Kernel is a serializable object that caches information about imported kernels This file is stored in /var/lib/firecracker/kernels/{oci-image-digest}/metadata.json",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "runtime.ObjectMeta is also embedded into the struct, and defines the human-readable name, and the machine-readable ID Name is available at the .metadata.name JSON path ID is available at the .metadata.uid JSON path (the Go type is k8s.io/apimachinery/pkg/types.UID, which is only a typed string)",
							Ref:         ref("github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.KernelSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.KernelStatus"),
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.KernelSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.KernelStatus", "github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_KernelSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KernelSpec describes the properties of a kernel",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"oci": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"),
						},
					},
				},
				Required: []string{"oci"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_KernelStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KernelStatus describes the status of a kernel",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ociSource": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.OCIImageSource"),
						},
					},
				},
				Required: []string{"version", "ociSource"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.OCIImageSource"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_Network(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Network specifies the VM's network information.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"plugin": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"ipAddresses": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "byte",
									},
								},
							},
						},
					},
				},
				Required: []string{"plugin", "ipAddresses"},
			},
		},
	}
}

func schema_pkg_apis_ignite_v1alpha3_OCIImageSource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OCIImageSource specifies how the OCI image was imported. It is the status variant of OCIImageClaim",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID defines the source's content ID (e.g. the canonical OCI path or Docker image ID)",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIContentID"),
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size defines the size of the source in bytes",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
				},
				Required: []string{"id", "size"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIContentID", "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_Pool(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Pool defines device mapper pool database This file is managed by the snapshotter part of Ignite, and the file (existing as a singleton) is present at /var/lib/firecracker/snapshotter/pool.json",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.PoolSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.PoolStatus"),
						},
					},
				},
				Required: []string{"TypeMeta", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.PoolSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.PoolStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_PoolDevice(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PoolDevice defines one device in the pool",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"size": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"parent": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.DMID"),
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type specifies the type of the contents of the device",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadataPath": {
						SchemaProps: spec.SchemaProps{
							Description: "MetadataPath points to the JSON/YAML file with metadata about this device This is most often of the format /var/lib/firecracker/{type}/{id}/metadata.json",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"size", "parent", "type", "metadataPath"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.DMID", "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_PoolSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PoolSpec defines the Pool's specification",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"metadataSize": {
						SchemaProps: spec.SchemaProps{
							Description: "MetadataSize specifies the size of the pool's metadata",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"dataSize": {
						SchemaProps: spec.SchemaProps{
							Description: "DataSize specifies the size of the pool's data",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"allocationSize": {
						SchemaProps: spec.SchemaProps{
							Description: "AllocationSize specifies the smallest size that can be allocated at a time",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"metadataPath": {
						SchemaProps: spec.SchemaProps{
							Description: "MetadataPath points to the file where device mapper stores all metadata information Defaults to constants.SNAPSHOTTER_METADATA_PATH",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dataPath": {
						SchemaProps: spec.SchemaProps{
							Description: "DataPath points to the backing physical device or sparse file (to be loop mounted) for the pool Defaults to constants.SNAPSHOTTER_DATA_PATH",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"metadataSize", "dataSize", "allocationSize", "metadataPath", "dataPath"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_PoolStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PoolStatus defines the Pool's current status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"devices": {
						SchemaProps: spec.SchemaProps{
							Description: "The Devices array needs to contain pointers to accommodate \"holes\" in the mapping Where devices have been deleted, the pointer is nil",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.PoolDevice"),
									},
								},
							},
						},
					},
				},
				Required: []string{"devices"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.PoolDevice"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_Runtime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Runtime specifies the VM's runtime information",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"id", "name"},
			},
		},
	}
}

func schema_pkg_apis_ignite_v1alpha3_SSH(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SSH specifies different ways to connect via SSH to the VM SSH uses a custom marshaller/unmarshaller. If generate is true, it marshals to true (a JSON bool). If PublicKey is set, it marshals to that string.",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_ignite_v1alpha3_VM(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VM represents a virtual machine run by Firecracker These files are stored in /var/lib/firecracker/vm/{vm-id}/metadata.json",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"TypeMeta": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"),
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "runtime.ObjectMeta is also embedded into the struct, and defines the human-readable name, and the machine-readable ID Name is available at the .metadata.name JSON path ID is available at the .metadata.uid JSON path (the Go type is k8s.io/apimachinery/pkg/types.UID, which is only a typed string)",
							Ref:         ref("github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMStatus"),
						},
					},
				},
				Required: []string{"TypeMeta", "metadata", "spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMStatus", "github.com/weaveworks/libgitops/pkg/runtime.ObjectMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_VMImageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"oci": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"),
						},
					},
				},
				Required: []string{"oci"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_VMKernelSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"oci": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"),
						},
					},
					"cmdLine": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"oci"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_VMNetworkSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"ports": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.PortMapping"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.PortMapping"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_VMSandboxSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VMSandboxSpec is the spec of the sandbox used for the VM.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"oci": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"),
						},
					},
				},
				Required: []string{"oci"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.OCIImageRef"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_VMSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VMSpec describes the configuration of a VM",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMImageSpec"),
						},
					},
					"sandbox": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMSandboxSpec"),
						},
					},
					"kernel": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMKernelSpec"),
						},
					},
					"cpus": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"memory": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"diskSize": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"),
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "Currently both will show in the JSON output as empty arrays. Making them pointers requires plenty of nil checks (as their contents are accessed directly) and is very risky for stability. APIMachinery potentially has a solution.",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMNetworkSpec"),
						},
					},
					"storage": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMStorageSpec"),
						},
					},
					"copyFiles": {
						SchemaProps: spec.SchemaProps{
							Description: "This will be done at either \"ignite start\" or \"ignite create\" time",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.FileMapping"),
									},
								},
							},
						},
					},
					"ssh": {
						SchemaProps: spec.SchemaProps{
							Description: "SSH specifies how the SSH setup should be done nil here means \"don't do anything special\" If SSH.Generate is set, Ignite will generate a new SSH key and copy it in to authorized_keys in the VM Specifying a path in SSH.Generate means \"use this public key\" If SSH.PublicKey is set, this struct will marshal as a string using that path If SSH.Generate is set, this struct will marshal as a bool => true",
							Ref:         ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.SSH"),
						},
					},
				},
				Required: []string{"image", "sandbox", "kernel", "cpus", "memory", "diskSize"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.FileMapping", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.SSH", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMImageSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMKernelSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMNetworkSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMSandboxSpec", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VMStorageSpec", "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1.Size"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_VMStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VMStatus defines the status of a VM",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"running": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"runtime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Runtime"),
						},
					},
					"startTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/libgitops/pkg/runtime.Time"),
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Network"),
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.OCIImageSource"),
						},
					},
					"kernel": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.OCIImageSource"),
						},
					},
				},
				Required: []string{"running", "image", "kernel"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Network", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.OCIImageSource", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Runtime", "github.com/weaveworks/libgitops/pkg/runtime.Time"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_VMStorageSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VMStorageSpec defines the VM's Volumes and VolumeMounts",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"volumes": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Volume"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VolumeMount"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.Volume", "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.VolumeMount"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_Volume(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Volume defines named storage volume",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"blockDevice": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.BlockDeviceVolume"),
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha3.BlockDeviceVolume"},
	}
}

func schema_pkg_apis_ignite_v1alpha3_VolumeMount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VolumeMount defines the mount point for a named volume inside a VM",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"mountPath": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "mountPath"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1alpha1_DMID(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DMID specifies the format for device mapper IDs",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"index": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"index"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1alpha1_OCIContentID(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"repoName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"digest": {
						SchemaProps: spec.SchemaProps{
							Description: "Fully qualified image name, e.g. \"docker.io/library/node\" or blank if the image is local",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"repoName", "digest"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1alpha1_OCIImageRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OCIImageRef is a struct containing a names and tagged reference by which an OCI runtime can identify an image to retrieve.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "tag"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1alpha1_PortMapping(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PortMapping defines a port mapping between the VM and the host",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"bindAddress": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "byte",
						},
					},
					"hostPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"vmPort": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"protocol": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"hostPort", "vmPort"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1alpha1_Size(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Size specifies a common unit for data sizes",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"ByteSize": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
				},
				Required: []string{"ByteSize"},
			},
		},
	}
}
